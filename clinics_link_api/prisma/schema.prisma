// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id             String          @id @default(cuid())
  name           String
  address        String
  phone          String
  email          String?
  logo           String?
  settings       Json?           // Clinic settings like working hours, holiday dates, etc.
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  users          UserClinic[]
  patients       Patient[]
  departments    Department[]
  rooms          Room[]
  doctors        Doctor[]
  appointments   Appointment[]
  activityLogs   ActivityLog[]
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  name           String
  phone          String?
  avatar         String?
  isActive       Boolean         @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  clinics        UserClinic[]
  activityLogs   ActivityLog[]
}

model UserClinic {
  userId         String
  clinicId       String
  role           Role            @default(STAFF)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic         Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  @@id([userId, clinicId])
}

model Patient {
  id             String          @id @default(cuid())
  clinicId       String
  nationalId     String?
  name           String
  birthDate      DateTime?
  gender         Gender?
  phone          String
  email          String?
  address        String?
  emergencyContact String?
  emergencyPhone String?
  medicalHistory Json?
  note           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  clinic         Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  
  @@unique([clinicId, nationalId])
  @@index([clinicId, phone])
  @@index([clinicId, name])
}

model Department {
  id             String          @id @default(cuid())
  clinicId       String
  name           String
  description    String?
  color          String?         // Color for frontend display
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  clinic         Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctors        Doctor[]
  
  @@unique([clinicId, name])
}

model Doctor {
  id             String          @id @default(cuid())
  clinicId       String
  departmentId   String
  userId         String?         // If doctor is also a system user
  name           String
  title          String?
  specialty      String?
  licenseNumber  String?
  bio            String?
  avatar         String?
  scheduleData   Json?           // Doctor schedule data
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  clinic         Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  department     Department      @relation(fields: [departmentId], references: [id])
  appointments   Appointment[]
  rooms          DoctorRoom[]
  
  @@index([clinicId, name])
}

model Room {
  id             String          @id @default(cuid())
  clinicId       String
  name           String
  description    String?
  status         RoomStatus      @default(CLOSED)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  clinic         Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctors        DoctorRoom[]
  appointments   Appointment[]
  
  @@unique([clinicId, name])
}

model DoctorRoom {
  doctorId       String
  roomId         String
  createdAt      DateTime        @default(now())
  
  // Relations
  doctor         Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  room           Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@id([doctorId, roomId])
}

model Appointment {
  id             String          @id @default(cuid())
  clinicId       String
  patientId      String
  doctorId       String?
  roomId         String?
  appointmentNumber Int?         // Appointment sequence number
  appointmentTime DateTime?      // Scheduled time
  checkinTime    DateTime?       // Check-in time
  startTime      DateTime?       // Start time
  endTime        DateTime?       // End time
  status         AppointmentStatus @default(SCHEDULED)
  source         AppointmentSource @default(WALK_IN) // Appointment source
  note           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  clinic         Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patient        Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor         Doctor?         @relation(fields: [doctorId], references: [id])
  room           Room?           @relation(fields: [roomId], references: [id])
  
  @@index([clinicId, status])
  @@index([clinicId, appointmentTime])
  @@index([patientId, status])
}

model ActivityLog {
  id             String          @id @default(cuid())
  clinicId       String
  userId         String
  action         String
  resource       String
  resourceId     String?
  details        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime        @default(now())
  
  // Relations
  clinic         Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([clinicId, createdAt])
  @@index([userId, createdAt])
}

enum Role {
  ADMIN          // System admin
  CLINIC_ADMIN   // Clinic admin
  DOCTOR         // Doctor
  NURSE          // Nurse
  STAFF          // General staff
  RECEPTIONIST   // Front desk receptionist
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RoomStatus {
  OPEN           // Open for consultation
  PAUSED         // Paused
  CLOSED         // Closed
}

enum AppointmentStatus {
  SCHEDULED      // Scheduled
  CHECKED_IN     // Checked in
  IN_PROGRESS    // In progress
  COMPLETED      // Completed
  CANCELLED      // Cancelled
  NO_SHOW        // No show
}

enum AppointmentSource {
  WALK_IN        // Walk-in
  PHONE          // Phone
  ONLINE         // Online
  LINE           // LINE
  APP            // Mobile app
}