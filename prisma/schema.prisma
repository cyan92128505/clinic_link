generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  email     String?
  logo      String?
  settings  Json? // Clinic settings like working hours, holidays
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users          UserClinic[]
  patientClinics PatientClinic[] // Changed from patients to patientClinics
  departments    Department[]
  rooms          Room[]
  doctors        Doctor[]
  appointments   Appointment[]
  activityLogs   ActivityLog[]
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  phone       String?
  avatar      String?
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  clinics      UserClinic[]
  activityLogs ActivityLog[]
}

model UserClinic {
  userId    String
  clinicId  String
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@id([userId, clinicId])
}

// Modified Patient model - removed clinicId
model Patient {
  id               String    @id @default(cuid())
  firebaseUid      String?   @unique // Added for Firebase authentication
  nationalId       String?   @unique // Made globally unique
  name             String
  birthDate        DateTime?
  gender           Gender?
  phone            String
  email            String?
  address          String?
  emergencyContact String?
  emergencyPhone   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  clinicPatients PatientClinic[] // New relation
  appointments   Appointment[]

  @@index([firebaseUid])
  @@index([nationalId])
  @@index([phone])
  @@index([name])
}

// New PatientClinic model for many-to-many relationship
model PatientClinic {
  patientId      String
  clinicId       String
  patientNumber  String? // Clinic-specific patient number
  medicalHistory Json? // Clinic-specific medical history
  note           String? // Clinic-specific notes
  firstVisitDate DateTime @default(now())
  lastVisitDate  DateTime @default(now())
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  clinic  Clinic  @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@id([patientId, clinicId])
  @@unique([clinicId, patientNumber]) // Patient number is unique within a clinic
  @@index([clinicId, isActive])
}

model Department {
  id          String   @id @default(cuid())
  clinicId    String
  name        String
  description String?
  color       String? // For frontend display
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clinic  Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctors Doctor[]

  @@unique([clinicId, name])
}

model Doctor {
  id            String   @id @default(cuid())
  clinicId      String
  departmentId  String
  userId        String? // If doctor is also a system user
  name          String
  title         String?
  specialty     String?
  licenseNumber String?
  bio           String?
  avatar        String?
  scheduleData  Json? // Doctor scheduling data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  clinic       Clinic        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  department   Department    @relation(fields: [departmentId], references: [id])
  appointments Appointment[]
  rooms        DoctorRoom[]

  @@index([clinicId, name])
}

model Room {
  id          String     @id @default(cuid())
  clinicId    String
  name        String
  description String?
  status      RoomStatus @default(CLOSED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  clinic       Clinic        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctors      DoctorRoom[]
  appointments Appointment[]

  @@unique([clinicId, name])
}

model DoctorRoom {
  doctorId  String
  roomId    String
  createdAt DateTime @default(now())

  // Relations
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([doctorId, roomId])
}

// Appointment model remains mostly the same
model Appointment {
  id                String            @id @default(cuid())
  clinicId          String
  patientId         String // Still references Patient.id
  doctorId          String?
  roomId            String?
  appointmentNumber Int? // 看診號碼
  appointmentTime   DateTime? // 預約時間
  checkinTime       DateTime? // 報到時間
  startTime         DateTime? // 開始看診時間
  endTime           DateTime? // 結束看診時間
  status            AppointmentStatus @default(SCHEDULED)
  source            AppointmentSource @default(WALK_IN)
  note              String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // 關聯
  clinic  Clinic  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor? @relation(fields: [doctorId], references: [id])
  room    Room?   @relation(fields: [roomId], references: [id])

  @@unique([id, clinicId])
  @@index([clinicId, status])
  @@index([clinicId, appointmentTime])
  @@index([patientId, status])
  @@map("appointments")
}

model ActivityLog {
  id         String   @id @default(cuid())
  clinicId   String
  userId     String
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  clinic Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clinicId, createdAt])
  @@index([userId, createdAt])
}

enum Role {
  ADMIN // System administrator
  CLINIC_ADMIN // Clinic administrator
  DOCTOR // Doctor
  NURSE // Nurse
  STAFF // General staff
  RECEPTIONIST // Front desk receptionist
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RoomStatus {
  OPEN // Room is open for appointments
  PAUSED // Temporarily paused
  CLOSED // Room is closed
}

enum AppointmentStatus {
  SCHEDULED // Scheduled appointment
  CHECKED_IN // Patient has checked in
  IN_PROGRESS // Currently in progress
  COMPLETED // Completed appointment
  CANCELLED // Cancelled appointment
  NO_SHOW // Patient didn't show up
}

enum AppointmentSource {
  WALK_IN // Walk-in registration
  PHONE // Phone reservation
  ONLINE // Online reservation
  LINE // LINE app reservation
  APP // Mobile app reservation
}
