generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  email     String?
  logo      String?
  settings  Json? // Clinic settings like working hours, holidays
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userRoles      UserRole[] // Renamed from users to userRoles
  patientClinics PatientClinic[]
  departments    Department[]
  rooms          Room[]
  doctors        Doctor[]
  appointments   Appointment[]
  activityLogs   ActivityLog[]
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  phone       String?
  avatar      String?
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userRoles    UserRole[] // Renamed from clinics to userRoles
  activityLogs ActivityLog[]
}

// New Permission model
model Permission {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., patients:read
  name        String
  description String?
  resource    String // Resource type, e.g., patients
  action      String // Action, e.g., read, write, delete
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@index([resource, action])
}

// New SystemRole model (replacing the Role enum)
model SystemRole {
  id          String   @id @default(cuid())
  code        String   @unique // System level role code, e.g., SUPER_ADMIN
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@index([code])
}

// New RolePermission model
model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  systemRole SystemRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// Replacing UserClinic with UserRole
model UserRole {
  userId       String
  clinicId     String
  systemRoleId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic     Clinic     @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  systemRole SystemRole @relation(fields: [systemRoleId], references: [id])

  @@id([userId, clinicId])
  @@index([userId, systemRoleId])
}

model Patient {
  id               String    @id @default(cuid())
  firebaseUid      String?   @unique
  nationalId       String?   @unique
  name             String
  birthDate        DateTime?
  gender           Gender?
  phone            String
  email            String?
  address          String?
  emergencyContact String?
  emergencyPhone   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  clinicPatients PatientClinic[]
  appointments   Appointment[]

  @@index([firebaseUid])
  @@index([nationalId])
  @@index([phone])
  @@index([name])
}

model PatientClinic {
  patientId      String
  clinicId       String
  patientNumber  String?
  medicalHistory Json?
  note           String?
  firstVisitDate DateTime @default(now())
  lastVisitDate  DateTime @default(now())
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  clinic  Clinic  @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@id([patientId, clinicId])
  @@unique([clinicId, patientNumber])
  @@index([clinicId, isActive])
}

model Department {
  id          String   @id @default(cuid())
  clinicId    String
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clinic  Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctors Doctor[]

  @@unique([clinicId, name])
}

model Doctor {
  id            String   @id @default(cuid())
  clinicId      String
  departmentId  String
  userId        String?
  name          String
  title         String?
  specialty     String?
  licenseNumber String?
  bio           String?
  avatar        String?
  scheduleData  Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  clinic       Clinic        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  department   Department    @relation(fields: [departmentId], references: [id])
  appointments Appointment[]
  rooms        DoctorRoom[]

  @@index([clinicId, name])
}

model Room {
  id          String     @id @default(cuid())
  clinicId    String
  name        String
  description String?
  status      RoomStatus @default(CLOSED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  clinic       Clinic        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  doctors      DoctorRoom[]
  appointments Appointment[]

  @@unique([clinicId, name])
}

model DoctorRoom {
  doctorId  String
  roomId    String
  createdAt DateTime @default(now())

  // Relations
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([doctorId, roomId])
}

model Appointment {
  id                String            @id @default(cuid())
  clinicId          String
  patientId         String
  doctorId          String?
  roomId            String?
  appointmentNumber Int?
  appointmentTime   DateTime?
  checkinTime       DateTime?
  startTime         DateTime?
  endTime           DateTime?
  status            AppointmentStatus @default(SCHEDULED)
  source            AppointmentSource @default(WALK_IN)
  note              String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  clinic  Clinic  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor? @relation(fields: [doctorId], references: [id])
  room    Room?   @relation(fields: [roomId], references: [id])

  @@unique([id, clinicId])
  @@index([clinicId, status])
  @@index([clinicId, appointmentTime])
  @@index([patientId, status])
  @@map("appointments")
}

model ActivityLog {
  id         String   @id @default(cuid())
  clinicId   String
  userId     String
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  clinic Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clinicId, createdAt])
  @@index([userId, createdAt])
}

// We'll keep the existing enums but remove the Role enum
// as it's being replaced by the SystemRole model
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RoomStatus {
  OPEN
  PAUSED
  CLOSED
}

enum AppointmentStatus {
  SCHEDULED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentSource {
  WALK_IN
  PHONE
  ONLINE
  LINE
  APP
}
